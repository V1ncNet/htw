#!/bin/bash

URL="http://ilpro122.informatik.htw-dresden.de/logs/"
MODE=0

HOSTS="ipo51 ipc88 ilpro122 fohls all"
USERS="root users login"

HOST=""
USER=""

TMPDIR="$(mktemp -d)"

# Prints the usage of this script
function usage {
    echo -e "Usage: Pass either one or two argument to the script.

    1. ./s77096 IP              Pass a valid IPv4 address to show the first as well as the latest failed login attempt
                                of the given address.
    2. ./s77096 host filter     Pass a hostname and a filter term to filter the logs. host is restrictet to the
                                hostnames \"ipo51, ipc88, ilpro122, fohls\" and \"all\" and filter to \"root, users\"
                                and \"login\".
                                \"all\" will include all log files
                                \"login\" will print the usernames instead of the IP addresses
    "
}

# Validates an IPv4 address, inspired by https://www.linuxjournal.com/content/validating-ip-address-bash-script
function validate_ip {
    ip="$1"

    # Checks the ip if it consists of four dot separated numbers
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS   # backs up the internal file separator, usually '\n'
        IFS='.'     # overrides the file seperator
        ip=($ip)    # turns the ip into an array of size 4
        IFS=$OIFS   # restores the original separator

        # Checks if all ip segments are in the less or equal to 255
        if [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]; then
            return 0
        fi
    fi

    usage
    error "Malformed IP address"
}

# Removes the TMPDIR
function cleanup {
    rm -Rf $TMPDIR
}

# Prints an error message, calls cleanup and exits the script with 1
function error {
    echo -e "\e[31m$1\e[39m"
    cleanup
    exit 1
}

# Performs some checks before download and log evaluation starts
case "$#" in
    1)
        validate_ip $1
        IP="$1"
        ;;
    2)
        MODE=1

        if [[ ! $HOSTS == *"$1"* ]]; then # TODO Fix substring issue
            usage
            error "Illegal first argument"
        fi

        if [[ ! $USERS == *"$2"* ]]; then # TODO Fix substring issue
            usage
            error "Illegal second argument"
        fi

        if [ ! $1 == "all" ]; then
            HOST="$1"
        fi

        USER="$2"
        ;;
    *)
        usage
        error "Illegal number of arguments"
        ;;
esac

# Start
echo -e "\e[2mDownloading logs from \e[96m$URL\e[39m to \e[96m$TMPDIR\e[39m ...\e[0m"

: '
Download log files
    -rq             recursive and quiet (same as -r -q)
    -nH             do not create host directory
    -A "*.log*"     accept only files matching the pattern "*.log*"
    -P $TMPDIR      prefix files with value of TMPDIR
    --cut-dirs=1    omit root directory
'
wget -rq -nH -A "*.log*" -P $TMPDIR --cut-dirs=1 $URL || error "Unable to download log files" # Exit if wget exits with a non-zero code

echo

# 
: '
Find and uncompress .gz files in TMPDIR
    -type f                 of type file
    -name "*.gz"            with name matching the pattern "*.gz"
    -exec gzip -d "{}" \;   execute gzip -d for each result to uncompress .gz files
'
find $TMPDIR -type f -name "*.gz" -exec gzip -d "{}" \;

# Find files matching the pattern of HOST. If HOST is empty all files will be found
FILES="$(find $TMPDIR -type f -name "*$HOST*")"

if [ $MODE -eq 1 ]; then
    filter="Failed password for invalid user"
    i=11

    case "$USER" in
        "root")
            filter="Failed password for root"
            ;;
        "users")
            filter="Failed password for invalid user"
            i=13
            ;;
    esac

    # Filters all lines in FILES by the value of filter, extracts the i-th word, sorts, merges, counts the results and sorts the result by appearance
    cat $FILES | grep "$filter" | awk -v i="$i" '{print $i}' | sort | uniq -c | sort -n
else # Must be MODE=0
    # Filters all lines in FILES by the "Failed password for" phrase as well as the given IP, and sorts the result by date 
    result="$(cat $FILES | grep -e "Failed password for.*$IP" | awk '{print $1 " " $2 " 2018 " $3}' | date -f - +%s | sort -n)"

    if [[ -z $result ]]; then
        error "Unable to find \e[1m$IP\e[0m"
    fi

    # Gets the first and last word of result and converts them back to a human-readable date
    first="$(echo $result | awk '{print "@" $1}' | date -f - )"
    last="$(echo $result | awk '{print "@" $NF}' | date -f - )"

    echo -e "Fist rejected attempt was on \e[1m$first\e[0m, last on \e[1m$last\e[0m"
fi

cleanup
exit 0

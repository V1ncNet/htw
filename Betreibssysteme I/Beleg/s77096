#!/bin/bash

URL="http://ilpro122.informatik.htw-dresden.de/logs/"
MODE=0

HOSTS="ipo51 ipc88 ilpro122 fohls all"
USERS="root users login"

# TMPDIR="$(mktemp -d)"
TMPDIR="/tmp/tmp.bbUJ8WjWMi"

function usage {
    echo
    echo "Usage:"
}

function validate_ip {
    local ip=$1
    local stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
            stat=$?
    fi

    return $stat;
}

function cleanup {
    # rm -Rf $TMPDIR
    echo "Fake cleanup"
}

function error {
    cleanup
    echo -e "\e[31m$1\e[39m"
    exit 1
}

# TODO Replace with switch-case
if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]; then
    usage
    error "Illegal number of arguments"
fi

if [ "$#" == 1 ]; then
    validate_ip $1 || (usage; error "Malformed IP address")

    IP="$1"
fi

if [ "$#" == 2 ]; then
    MODE=1

    if [[ ! $HOSTS == *"$1"* ]]; then
        usage
        error "Illegal first argument"
    fi

    if [[ ! $USERS == *"$2"* ]]; then
        usage
        error "Illegal second argument"
    fi

    HOST="$1"
    USER="$2"
fi


# Start
echo "Downloading logs from $URL to $TMPDIR"

# Download log files
#  -rq          recursive and quiet
#  -nH          create no host directory
#  -A           accept list: accept only log files
#  -P           prefix: download to temp folder
#  --cut-dirs   omit root directory
# wget -rq -nH -A "*.log*" -P $TMPDIR --cut-dirs=1 $URL || error "Unable to download log files. Abort."

echo "Successfully downloaded log files"
echo "Decompress rotated log files"

# Find and uncompress all gz files
find $TMPDIR -type f -name "*.gz" -exec gzip -d "{}" \;

echo "Decompressed log files"

if [ $MODE -eq 1 ]; then
    if [ $HOST == "all" ]; then
        HOST="auth"
    fi

    FILES="$(find $TMPDIR -type f -name "*$HOST*")"

    case "$USER" in
        "root")
            # Find given phrase in all logs, get unique IPs from the result und print them in order of appearance
            cat $FILES | grep "Failed password for root" | awk '{print $11}' | sort | uniq -c | sort -n
            ;;
        "users")
            cat $FILES | grep "Failed password for invalid user" | awk '{print $13}' | sort | uniq -c | sort -n
            ;;
        "login")
            cat $FILES | grep "Failed password for invalid user" | awk '{print $11}' | sort | uniq -c | sort -n
            ;;
    esac
fi

cleanup
exit 0
